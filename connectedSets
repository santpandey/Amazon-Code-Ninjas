#include<stdio.h>

int n;

int connected(int s[n][n],int y,int z)
{
	int p,q,a,b;
	p=y;
	q=z;
	
/* Below for loops calculate the neighbours of the array element whose value is 1 */
    
	for(a=p-1;a<=p+1;a++)
	{
		for(b=q-1;b<=q+1;b++)
		{

                    /* Condition to check whether the neighbours indices are in limit */
			
                    if((a!=p || b!=q) && (a>=0 && b>=0) && (a<n && b<n))

			{
                            /*If neighbour is 1, then make original element=2*/
			
                            if(s[a][b]==1)

				{
					s[p][q]=2;				
					connected(s,a,b);
				}
                            
                            /*If neighbour value is 2, it means that the particular element doesn't have any neighbour whose value is 1 */
				
                            else if(s[a][b]==2)
				{
					s[p][q]=0;
					connected(s,a,b);
				}
                        
                            /* If the value of element is 2, make it 0 because all its neighbours have been covered */
                            
				else if(s[p][q]==2)

				{
					s[p][q]=0;
					return 1;
				}		
					
				
			}
		}
	}
}

void main()
{
	int i,j,r=0,k=0,p,m;

    /* m is the number of iteration */

    scanf("%d",&m);
    
    /* o[m] is the array to store the connected sets value for each iteration */
    
	int o[m];

	/*scanf("%d",&n);
	
	int s[n][n];*/

    /* n is the size of the array and s[n][n] is the actual array in which elements are stored */
    
	for(p=0;p<m;p++)
	{scanf("%d",&n);
	int s[n][n];	

	
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			scanf("%d",&s[i][j]);
		}
	}

	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(s[i][j]==1)
			{
				r=connected(s,i,j);
				++k;
			}
		}
	}
	o[p]=k;
	k=0;
	}
	for(p=0;p<m;p++)
	{
		printf("%d\n",o[p]);
	}
}
